fn matmul<3>(a: array(f32, #0, #1), b: array(f32, #1, #2)) -> array(f32, #0, #2)
  i = fork(start, #0)
  i_ctrl = read_prod(i, 0)
  i_idx = read_prod(i, 1)
  k = fork(i_ctrl, #2)
  k_ctrl = read_prod(k, 0)
  k_idx = read_prod(k, 1)
  zero_idx = constant(u64, 0)
  one_idx = constant(u64, 1)
  zero_val = constant(f32, 0)
  loop = region(k_ctrl, if_true)
  j = phi(loop, zero_idx, j_inc)
  sum = phi(loop, zero_val, sum_inc)
  j_inc = add(j, one_idx)
  val1 = read_array(a, i_idx, j)
  val2 = read_array(b, j, k_idx)
  mul = mul(val1, val2)
  sum_inc = add(sum, mul)
  j_size = dynamic_constant(#1)
  less = less_than(j_inc, j_size)
  if = if(loop, less)
  if_false = read_prod(if, 0)
  if_true = read_prod(if, 1)
  k_join = join(if_false, sum_inc, #2)
  k_join_ctrl = read_prod(k_join, 0)
  k_join_data = read_prod(k_join, 1)
  i_join = join(k_join_ctrl, k_join_data, #0)
  i_join_ctrl = read_prod(i_join, 0)
  i_join_data = read_prod(i_join, 1)
  r = return(i_join_ctrl, i_join_data)
